#+TITLE: Base Preferences

[[file:../README.org][Back to main config]]

* [[https://www.emacswiki.org/emacs/YesOrNoP][Don't question me]]

  #+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

* We need [[https://github.com/emacsmirror/diminish][diminish]]

   There are some variables we'll really want to set up before
   everything gets kicked off. Usually we'd want to do this by using
   the :config key in use-package, but sometimes, I'm not smart enough
   to know how to do it. Abbreviate or hide all the minor modes.
   
   #+BEGIN_SRC emacs-lisp
     (use-package diminish :ensure t)
   #+END_SRC

* Backups

   Backups are handy for those times where you run out of power
   suddenly or you get a kernel panic, but it isn't fun having them
   littered around the system.

   #+BEGIN_SRC emacs-lisp
     (setq
      backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups
   #+END_SRC

* Enabling the disabled

** upcase and downcase region

    I like to be able to do this. I get lots of things that come in
    SHOUTING or that need to SHOUT.

    #+BEGIN_SRC emacs-lisp
      (put 'downcase-region 'disabled nil)
      (put 'upcase-region 'disabled nil)
    #+END_SRC

** Narrowing the region to what I want to look at

    This isn't needed quite so much now that searches, regexp and
    otherwise operate, sometimes annoyingly to an old timer like me, on
    the region rather than the whole buffer window. I still like to
    narrow down to what I'm interested in though and not every handy
    tool in emacs is quite so region oriented.

    #+BEGIN_SRC emacs-lisp
      (put 'narrow-to-region 'disabled nil)
    #+END_SRC

* Custom configuration location

   custom.el is great for configuring things through that "gui" in
   emacs, but it is a real pain when it drops junk in your [[../init.el][init.el]] and
   messes up your pretty config and git history and is stuff that you
   don't want to leak out on to github. You can change the location of
   this file though and I like to do this.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat user-emacs-directory "local/custom.el"))
     (load-if-exists custom-file)
   #+END_SRC

* Colours

   It seems trivial, but it is one of the first things I do after I
   get the basics up and running. I like to get my colours and other
   basic window chrome and geegaws right.

   #+BEGIN_SRC emacs-lisp
     (use-package color-theme-sanityinc-tomorrow
       :ensure t
       :load-path "themes"
       :config
       (load-theme 'sanityinc-tomorrow-bright t))
   #+END_SRC

* Cursors
  
** [[https://www.emacswiki.org/emacs/NonBlinkingCursor][Show me where the cursor is]]
  
   #+BEGIN_SRC emacs-lisp
   (blink-cursor-mode t)
   #+END_SRC
   
   
** [[https://www.emacswiki.org/emacs/DeleteSelectionMode][Deleteing a selection]]
 
   #+BEGIN_SRC emacs-lisp
   (delete-selection-mode t)
   #+END_SRC

** [[https://www.emacswiki.org/emacs/ShowParenMode][Show parens]]
   
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode t)
   #+END_SRC

* Bars, columns and lines

   I don't want a tool bar or a scroll bar ever and I don't want a
   menu when I'm in a terminal window.  I do like the menu to discover
   new things and keybindings when I'm using emacs as an X
   application.

   #+BEGIN_SRC emacs-lisp
   ;; no toolbar
   (tool-bar-mode -1)

   ;; no menu in a terminal
   (unless window-system
     (menu-bar-mode -1))

   ;; no scroll bar
   ;;(scroll-bar-mode -1)

   ;; no horizontal scroll bar
   (when (boundp 'horizontal-scroll-bar-mode)
     (horizontal-scroll-bar-mode -1))
   #+END_SRC

   I also like to have an idea of where I am in the file so I'd like
   line and column numbers.

   #+BEGIN_SRC emacs-lisp
     (global-linum-mode 1)
     (line-number-mode 1)
     (column-number-mode 1)
   #+END_SRC

* Startup Screen

   I'd also like to skip the startup screen and go straight to the
   *scratch* buffer.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
     (setq initial-scratch-message ";; scratch buffer created -- happy hacking\n")
   #+END_SRC
* [[https://www.emacswiki.org/emacs/ToggleWindowSplit][Toggle window split]]

  I like to be able to toggle the vertical or horizontal position of the window

  #+BEGIN_SRC emacs-lisp
    (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
	(let* ((this-win-buffer (window-buffer))
	       (next-win-buffer (window-buffer (next-window)))
	       (this-win-edges (window-edges (selected-window)))
	       (next-win-edges (window-edges (next-window)))
	       (this-win-2nd (not (and (<= (car this-win-edges)
					   (car next-win-edges))
				       (<= (cadr this-win-edges)
					   (cadr next-win-edges)))))
	       (splitter
		(if (= (car this-win-edges)
		       (car (window-edges (next-window))))
		    'split-window-horizontally
		  'split-window-vertically)))
	  (delete-other-windows)
	  (let ((first-win (selected-window)))
	    (funcall splitter)
	    (if this-win-2nd (other-window 1))
	    (set-window-buffer (selected-window) this-win-buffer)
	    (set-window-buffer (next-window) next-win-buffer)
	    (select-window first-win)
	    (if this-win-2nd (other-window 1))))))

  (global-set-key (kbd "C-x t") 'toggle-window-split)
  #+END_SRC
