#+TITLE: My Fromt-end setup

* JavaScript

** basic setup
   [[https://ternjs.net/doc/manual.html#emacs][Tern, the "intelligent javascript tooling"]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "/Users/ryandurling/.emacs.d/submodules/tern/emacs")
   (autoload 'tern-mode "tern.el" nil t)
   (add-hook 'js-mode-hook (lambda () (tern-mode t)))
   (setq js-indent-level 2)
   #+END_SRC

** Always find the [[https://github.com/codesuki/add-node-modules-path][nearest node_modules]]

   This file provides add-node-modules-path, which searches the current files parent directories for the
   node_modules/.bin/ directory and adds it to the buffer local exec-path. This allows Emacs to find project
   based installs of e.g. eslint.

   #+BEGIN_SRC emacs-lisp
   (use-package add-node-modules-path
     :ensure t
     :config (eval-after-load 'js-mode
	       '(add-hook 'js-mode-hook #'add-node-modules-path)))
   #+END_SRC

** auto complete

   #+BEGIN_SRC emacs-lisp
   (use-package auto-complete
     :ensure t
     :config
     (add-hook 'js-mode-hook (lambda () (auto-complete-mode t)))
     (eval-after-load 'tern
       '(progn
	  (require 'tern-auto-complete)
	  (tern-ac-setup))))
   #+END_SRC

** indium

   #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
     :ensure t
     :custom
     (exec-path-from-shell-check-startup-files nil)
     :config
     (push "HISTFILE" exec-path-from-shell-variables)
     (exec-path-from-shell-initialize))

   (add-hook 'after-init-hook 'global-company-mode)

   (use-package indium
     :ensure t
     :config
     (add-hook 'js-mode-hook #'indium-interaction-mode))
   #+END_SRC

** Lint

   On the fly eslint
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :defer 1
     :ensure t
     :init (global-flycheck-mode)
     :config
     (setq-default flycheck-disabled-checkers
		   (append flycheck-disabled-checkers
			   '(javascript-jshint)))

     (flycheck-add-mode 'javascript-eslint 'js-mode)

     (setq-default flycheck-disabled-checkers
		   (append flycheck-disabled-checkers
			   '(json-jsonlist)))

     (defun my/use-eslint-from-node-modules ()
       (let* ((root (locate-dominating-file
		     (or (buffer-file-name) default-directory)
		     "node_modules"))
	      (eslint (and root
			   (expand-file-name "node_modules/eslint/bin/eslint.js"
					     root))))
	 (when (and eslint (file-executable-p eslint))
	   (setq-local flycheck-javascript-eslint-executable eslint))))
     (add-hook 'js-mode-hook #'my/use-eslint-from-node-modules))
   #+END_SRC

   eslint --fix on save
   #+BEGIN_SRC emacs-lisp
   (defun eslint-fix-file ()
     (interactive)
     (message "eslint --fixing the file" (buffer-file-name))
     (shell-command (concat "node_modules/eslint/bin/eslint.js --fix " (buffer-file-name))))

   (defun eslint-fix-file-and-revert ()
     (interactive)
     (eslint-fix-file)
     (revert-buffer t t))

   (add-hook 'js-mode-hook
	     (lambda ()
	       (add-hook 'after-save-hook #'eslint-fix-file-and-revert)))
   #+END_SRC

* TypeScript

** basic setup

   #+BEGIN_SRC emacs-lisp
   (use-package typescript-mode
     :ensure t)

   (use-package ansi-color
     :ensure t
     :config
     (defun colorize-compilation-buffer ()
       (ansi-color-apply-on-region compilation-filter-start (point-max)))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer))

     (defun my/use-eslint-from-node-modules ()
       (let* ((root (locate-dominating-file
		     (or (buffer-file-name) default-directory)
		     "node_modules"))
	      (eslint (and root
			   (expand-file-name "node_modules/tslint/bin/tslint.js"
					     root))))
	 (when (and eslint (file-executable-p eslint))
	   (setq-local flycheck-javascript-eslint-executable eslint))))
     (add-hook 'typescript-mode-hook #'my/use-eslint-from-node-modules)

   (defun tslint-fix-file ()
     "Tslint fix file."
     (interactive)
     (message (concat "tslint --fixing the file " (buffer-file-name)))
     (shell-command (concat "tslint --fix " (buffer-file-name))))

   (defun tslint-fix-file-and-revert ()

     "Format the current file with TSLint."
     (interactive)
     (when (eq major-mode 'typescript-mode)
       (if (executable-find "tslint")
	   (tslint-fix-file)
	 (message "TSLint not found."))))

   ;; formats the buffer after saving
   (add-hook 'after-save-hook 'tslint-fix-file-and-revert)
   #+END_SRC
