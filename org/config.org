* Helpers
   There are a number of helper functions that we'll need through the
   rest of this. We'll just define them up here.

** load-if-exists

   This is just a nice function to load a file if it exists, but just
   print a message rather than an error if it doesn't. This is handy
   for things like loading specific local config that you don't want
   to go into github or be shared such as erc nicks, passwords, blog
   rolls, etc.

   #+BEGIN_SRC emacs-lisp
   (defun load-if-exists (file)
     (if (file-exists-p file)
	 (progn
	   (load file)
	   (message (format "Loading file: %s" file)))
       (message (format "No %s file. So not loading one." file))))
   #+END_SRC

** org-load-if-exists

   look at me adding my own helper. I want to use Babel to load other
   files into my configuration. You won't find this in the original
   repo.

   #+BEGIN_SRC emacs-lisp
   (defun org-babel-load-if-exists (file)
     (if (file-exists-p (concat user-emacs-directory file))
	 (progn
	   (org-babel-load-file (concat user-emacs-directory file))
	   (message (format "Loading file: %s" file)))
       (message (format "No %s file. So not loading one." file))))
   #+END_SRC

* Starting

  There are some variables we'll really want to set up before
  everything gets kicked off. Usually we'd want to do this by using
  the :config key in use-package, but sometimes, I'm not smart enough
  to know how to do it.

** We need diminish

   #+BEGIN_SRC emacs-lisp
     (use-package diminish :ensure t)
   #+END_SRC

** Backups

   Backups are handy for those times where you run out of power
   suddenly or you get a kernel panic, but it isn't fun having them
   littered around the system.

   #+BEGIN_SRC emacs-lisp
     (setq
      backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups
   #+END_SRC

** Enabling the disabled

*** upcase and downcase region

    I like to be able to do this. I get lots of things that come in
    SHOUTING or that need to SHOUT.

    #+BEGIN_SRC emacs-lisp
      (put 'downcase-region 'disabled nil)
      (put 'upcase-region 'disabled nil)
    #+END_SRC

*** Narrowing the region to what I want to look at

    This isn't needed quite so much now that searches, regexp and
    otherwise operate, sometimes annoyingly to an old timer like me, on
    the region rather than the whole buffer window. I still like to
    narrow down to what I'm interested in though and not every handy
    tool in emacs is quite so region oriented.

    #+BEGIN_SRC emacs-lisp
      (put 'narrow-to-region 'disabled nil)
    #+END_SRC

** custom.el

   custom.el is great for configuring things through that "gui" in
   emacs, but it is a real pain when it drops junk in your [[../init.el][init.el]] and
   messes up your pretty config and git history and is stuff that you
   don't want to leak out on to github. You can change the location of
   this file though and I like to do this.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat user-emacs-directory "local/custom.el"))
     (load-if-exists custom-file)
   #+END_SRC

** [[file:~/.emacs.d/custom/org-mode-settings.org::*Org%20mode%20settings][Org mode settings]]

   #+BEGIN_SRC emacs-lisp
   (org-babel-load-if-exists "custom/org-mode-settings.org")
   #+END_SRC
